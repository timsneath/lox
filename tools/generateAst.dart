import 'dart:io';

import 'package:dart_console/dart_console.dart';

final console = Console();

main(List<String> args) {
  if (args.length != 1) {
    console.writeErrorLine('Usage: generate_ast <output directory>');
    exit(1);
  }
  final outputDir = args[0];

  defineAst(outputDir, "Expr", [
    "Binary   : Expr left, Token op, Expr right",
    "Grouping : Expr expression",
    "Literal  : Object value",
    "Unary    : Token op, Expr right"
  ]);
}

void defineAst(String outputDir, String baseName, List<String> types) {
  final file = File('$outputDir/${baseName.toLowerCase()}.dart');
  final writer = file.openWrite();

  writer.writeln('// ${baseName.toLowerCase()}.dart');
  writer.writeln('//');
  writer.writeln('// This file is automatically generated by '
      'tool/generateAst.dart. It should');
  writer.writeln('// not be modified directly.');
  writer.writeln();

  writer.writeln("import '../token.dart';");
  writer.writeln();

  defineVisitor(writer, baseName, types);

  // define abstract Expr class
  writer.writeln('abstract class $baseName {');
  writer.writeln('  accept(Visitor visitor);');
  writer.writeln('}');
  writer.writeln();

  for (final type in types) {
    final className = type.split(':').first.trim();
    final fields = type.split(':').last.trim();
    defineType(writer, baseName, className, fields);
  }

  writer.close();
}

void defineVisitor(IOSink writer, String baseName, List<String> types) {
  writer.writeln('abstract class Visitor<R> {');

  for (final type in types) {
    final typeName = type.split(':').first.trim();
    writer.writeln(
        '  R visit$typeName$baseName($typeName ${baseName.toLowerCase()});');
  }

  writer.writeln('}');
  writer.writeln();
}

void defineType(
    IOSink writer, String baseName, String className, String fieldList) {
  writer.writeln('class $className extends $baseName {');

  final fields = fieldList.split(', ');
  for (final field in fields) {
    writer.writeln('  final $field;');
  }

  writer.writeln();

  // constructor
  writer.write('  $className(');
  final names = List<String>();
  for (final field in fields) {
    names.add('this.${field.split(' ').last}');
  }
  writer.write(names.join(', '));
  writer.writeln(');');

  writer.writeln();
  writer.writeln('  @override');
  writer.writeln('  accept(Visitor visitor) {');
  writer.writeln('    return visitor.visit$className$baseName(this);');
  writer.writeln('  }');

  writer.writeln('}');
  writer.writeln();
}
